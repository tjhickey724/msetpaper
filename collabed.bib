
@inproceedings{molli_using_2003,
	title = {Using the transformational approach to build a safe and generic data synchronizer},
	abstract = {Reconciliating divergent data is an important issue in concurrent engineering, mobile computing and software configuration management. Currently, a lot of synchronizers or merge tools perform reconciliations. However, they do not define what is the correctness of their synchronisation. In this paper, we propose to use a transformational approach as the basic model for reasonning about synchronisation. We propose an algorithm and specific transformation functions that realize a file system synchronisation. Unlike classic synchronizers, our synchronizer ensures properties of convergence, causality and intention preservation and is extensible to new data types.},
	booktitle = {In Proceedings of {ACM} Group 2003 Conference, November 9–12 2003},
	author = {Molli, Pascal and Oster, Gérald and Skaf-molli, Hala and Imine, Abdessamad},
	year = {2003},
	pages = {212–220},
	file = {Citeseer - Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/92H9PBIM/Molli et al. - 2003 - Using the transformational approach to build a saf.pdf:application/pdf;Citeseer - Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/938298AH/summary.html:text/html}
},

@inproceedings{oster_tombstone_2006,
	title = {Tombstone Transformation Functions for Ensuring Consistency in Collaborative Editing Systems},
	abstract = {Abstract — In collaborative editing, consistency maintenance of the copies of shared data is a critical issue. In the last decade, Operational Transformation {(OT)} approach revealed as a suitable mechanism for maintaining consistency. Unfortunately, none of the published propositions relying on this approach are able to satisfy the mandatory correctness properties T P1 and T P2 defined in the Ressel’s framework. This paper addresses this correctness issue by proposing a new way to model shared state by retaining tombstones when elements are removed. An instantiation of the proposed model for a linear data structure and the related transformation functions are provided. I.},
	booktitle = {Proceedings of the 2nd International Conference on Collaborative Computing: Networking, Applications and Worksharing},
	publisher = {{IEEE} Press},
	author = {Oster, Gérald},
	year = {2006},
	file = {Citeseer - Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/TWECCWS4/Oster - 2006 - Tombstone Transformation Functions for Ensuring Co.pdf:application/pdf;Citeseer - Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/UMPSR6K2/summary.html:text/html}
},

@article{sun_achieving_1998,
	title = {Achieving Convergence, Causality-preservation, and Intention-preservation in Real-time Cooperative Editing Systems},
	volume = {5},
	abstract = {ing with credit is permitted. To copy otherwise, to republish, to post on servers, to redistribute to lists, or to use any component of this work in other works, requires prior specific permission and/or a fee. Permissions may be requested from Publications Dept, {ACM} Inc., 1515 Broadway, New York, {NY} 10036 {USA}, fax 1 (212) 869-0481, or permissions@acm.org. {ACM} Transactions on Computer-Human Interactions, Vol.5, No.1, March 1998, Pages 63-108. 2 \{\textbackslash\}Delta Chengzheng Sun, et al. 1. {INTRODUCTION} Cooperative editing systems are very useful groupware tools in the rapidly expanding areas of {CSCW} {(Computer-Supported} Cooperative Work) {[Ellis} et al. 1991], They can be used to allow physically dispersed people to edit a shared textual document {[Ellis} and Gibbs 1989},
	journal = {{ACM} Transactions on Computer-Human Interaction},
	author = {Sun, Chengzheng},
	year = {1998},
	pages = {63–108},
	file = {Citeseer - Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/2KFVPCTI/Sun - 1998 - Achieving Convergence, Causality-preservation, and.pdf:application/pdf;Citeseer - Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/BTII8FBG/summary.html:text/html}
},

@inproceedings{ellis_groupware:_1991,
	title = {Groupware: Some issues and experiences},
	shorttitle = {Groupware},
	booktitle = {{COMMUNICATIONS} {OF} {THE} {ACM}},
	author = {Ellis, C. A. and Gibbs, S. J. and Rein, G. L.},
	year = {1991},
	pages = {38–58},
	file = {Citeseer - Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/9VSTTHZ4/Ellis et al. - 1991 - Groupware Some issues and experiences.pdf:application/pdf;Citeseer - Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/J38WETWE/summary.html:text/html}
},

@inproceedings{ellis_concurrency_1989,
	address = {New York, {NY}, {USA}},
	series = {{SIGMOD} '89},
	title = {Concurrency control in groupware systems},
	isbn = {0-89791-317-5},
	url = {http://doi.acm.org/10.1145/67544.66963},
	doi = {10.1145/67544.66963},
	abstract = {Groupware systems are computer-based systems that support two or more users engaged in a common task, and that provide an interface to a shared environment. These systems frequently require fine-granularity sharing of data and fast response times. This paper distinguishes real-time groupware systems from other multi-user systems and discusses their concurrency control requirements. An algorithm for concurrency control in real-time groupware systems is then presented. The advantages of this algorithm are its simplicity of use and its responsiveness: users can operate directly on the data without obtaining locks. The algorithm must know some semantics of the operations. However the algorithm's overall structure is independent of the semantic information, allowing the algorithm to be adapted to many situations. An example application of the algorithm to group text editing is given, along with a sketch of its proof of correctness in this particular case. We note that the behavior desired in many of these systems is non-serializable.},
	urldate = {2012-12-11},
	booktitle = {Proceedings of the 1989 {ACM} {SIGMOD} international conference on Management of data},
	publisher = {{ACM}},
	author = {Ellis, C. A. and Gibbs, S. J.},
	year = {1989},
	pages = {399–407},
	file = {ACM Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/TE5RTZB3/Ellis and Gibbs - 1989 - Concurrency control in groupware systems.pdf:application/pdf}
},

@article{imine_component-based_2007,
	title = {Component-Based Specification of Collaborative Objects},
	volume = {168},
	issn = {1571-0661},
	url = {http://dx.doi.org/10.1016/j.entcs.2006.08.027},
	doi = {10.1016/j.entcs.2006.08.027},
	abstract = {A collaborative object represents a data type (such as a text document or a spreadsheet) designed to be shared by multiple geographically separated users. In order to improve performance and availability of data in such a distributed context, each user has a local copy of the shared objects, upon which he may perform updates. Locally executed updates are then transmitted to the other users. So, the updates are applied in different orders at different copies of the collaborative object. This replication potentially leads, however, to divergent (i.e. different) copies. The Operational Transformation {(OT)} approach provides an interesting solution for copies divergence. Indeed, every collaborative object has an algorithm which transforms the remote update according to local concurrent ones. But this {OT} algorithm needs to fulfill two conditions in order to ensure the convergence. Proving the correctness of {OT} algorithms is very complex and error prone without the assistance of a theorem prover. In the present work, we propose a compositional method for specifying complex collaborative objects. The most important feature of our method is that designing an {OT} algorithm for the composed collaborative object can be done by reusing the {OT} algorithms of component collaborative objects. By using our method, we can start from correct small collaborative objects which are relatively easy to handle and incrementally combine them to build more complex collaborative objects.},
	urldate = {2012-12-11},
	journal = {Electron. Notes Theor. Comput. Sci.},
	author = {Imine, Abdessamad},
	month = feb,
	year = {2007},
	keywords = {component-based design, {CSCW}, formal methods, groupware systems},
	pages = {175–190}
},

@article{imine_component-based_2007-1,
	title = {Component-Based Specification of Collaborative Objects},
	volume = {168},
	issn = {1571-0661},
	shorttitle = {Proceedings of the Second International Workshop on Views on Designing Complex Architectures {(VODCA} 2006)},
	url = {http://www.sciencedirect.com/science/article/pii/S1571066107000357},
	doi = {10.1016/j.entcs.2006.08.027},
	abstract = {A collaborative object represents a data type (such as a text document or a spreadsheet) designed to be shared by multiple geographically separated users. In order to improve performance and availability of data in such a distributed context, each user has a local copy of the shared objects, upon which he may perform updates. Locally executed updates are then transmitted to the other users. So, the updates are applied in different orders at different copies of the collaborative object. This replication potentially leads, however, to divergent (i.e. different) copies. The Operational Transformation {(OT)} approach provides an interesting solution for copies divergence. Indeed, every collaborative object has an algorithm which transforms the remote update according to local concurrent ones. But this {OT} algorithm needs to fulfill two conditions in order to ensure the convergence. Proving the correctness of {OT} algorithms is very complex and error prone without the assistance of a theorem prover. In the present work, we propose a compositional method for specifying complex collaborative objects. The most important feature of our method is that designing an {OT} algorithm for the composed collaborative object can be done by reusing the {OT} algorithms of component collaborative objects. By using our method, we can start from correct small collaborative objects which are relatively easy to handle and incrementally combine them to build more complex collaborative objects.},
	number = {0},
	urldate = {2012-12-11},
	journal = {Electronic Notes in Theoretical Computer Science},
	author = {Imine, Abdessamad},
	month = feb,
	year = {2007},
	keywords = {component-based design, {CSCW}, formal methods, groupware systems},
	pages = {175--190},
	file = {ScienceDirect Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/IAPQBV72/Imine - 2007 - Component-Based Specification of Collaborative Obj.pdf:application/pdf;ScienceDirect Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/KZWCRCTK/S1571066107000357.html:text/html}
},

@article{imine_formal_2006,
	title = {Formal design and verification of operational transformation algorithms for copies convergence},
	volume = {351},
	issn = {0304-3975},
	shorttitle = {Algebraic Methodology and Software Technology The 10th International Conference on Algebraic Methodology and Software Technology 2004},
	url = {http://www.sciencedirect.com/science/article/pii/S030439750500616X},
	doi = {10.1016/j.tcs.2005.09.066},
	abstract = {Distributed groupware systems provide computer support for manipulating objects such as a text document or a filesystem, shared by two or more geographically separated users. Data replication is a technology to improve performance and availability of data in distributed groupware systems. Indeed, each user has a local copy of the shared objects, upon which he may perform updates. Locally executed updates are then transmitted to the other users. This replication potentially leads, however, to divergent (i.e. different) copies. In this respect, Operational Transformation {(OT)} algorithms are applied for achieving convergence of all copies, i.e. all users view the same objects. Using these algorithms users can exchange their updates in any order since the convergence should be ensured in all cases. However, the design of such algorithms is a difficult and error-prone activity since building the correct updates for maintaining good convergence properties of the local copies requires examining a large number of situations. In this paper, we present the modelling and deductive verification of {OT} algorithms with algebraic specifications. We show in particular that many {OT} algorithms in the literature do not satisfy convergence properties unlike what was stated by their authors.},
	number = {2},
	urldate = {2012-12-11},
	journal = {Theoretical Computer Science},
	author = {Imine, Abdessamad and Rusinowitch, Michaël and Oster, Gérald and Molli, Pascal},
	month = feb,
	year = {2006},
	keywords = {Algebraic specification, Automated verification, Distributed groupware systems, Operational transformation, Replication},
	pages = {167--183},
	file = {ScienceDirect Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/5PARFQN9/Imine et al. - 2006 - Formal design and verification of operational tran.pdf:application/pdf;ScienceDirect Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/ETDPDKB3/S030439750500616X.html:text/html}
},

@inproceedings{ressel_integrating_1996,
	address = {New York, {NY}, {USA}},
	series = {{CSCW} '96},
	title = {An integrating, transformation-oriented approach to concurrency control and undo in group editors},
	isbn = {0-89791-765-0},
	url = {http://doi.acm.org/10.1145/240080.240305},
	doi = {10.1145/240080.240305},
	urldate = {2012-12-11},
	booktitle = {Proceedings of the 1996 {ACM} conference on Computer supported cooperative work},
	publisher = {{ACM}},
	author = {Ressel, Matthias and Nitsche-Ruhland, Doris and Gunzenhäuser, Rul},
	year = {1996},
	keywords = {concurrency control, group editors, group undo, groupware, interaction model, operation transformation},
	pages = {288–297},
	file = {ACM Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/3KBVNEBJ/Ressel et al. - 1996 - An integrating, transformation-oriented approach t.pdf:application/pdf}
},

@inproceedings{sun_operational_2004,
	address = {New York, {NY}, {USA}},
	series = {{CSCW} '04},
	title = {Operational transformation for collaborative word processing},
	isbn = {1-58113-810-5},
	url = {http://doi.acm.org/10.1145/1031607.1031681},
	doi = {10.1145/1031607.1031681},
	abstract = {Operational Transformation {(OT)} is a technique originally invented for supporting consistency maintenance in collaborative text editors. Word processors have much richer data types and more comprehensive operations than plain text editors. Among others, the capability of updating attributes of any types of object is an essential feature of all word processors. In this paper, we report an extension of {OT} for supporting a generic \{\textless\}i\{\textgreater\}Update\{\textless\}/i\{\textgreater\} operation, in addition to \{\textless\}i\{\textgreater\}Insert\{\textless\}/i\{\textgreater\} and \{\textless\}i\{\textgreater\}Delete\{\textless\}/i\{\textgreater\} operations, for collaborative word processing. We focus on technical issues and solutions involved in transforming \{\textless\}i\{\textgreater\}Updates\{\textless\}/i\{\textgreater\} for both consistency maintenance and group undo. A novel technique, called Multi-Version Single-Display {(MVSD)}, has been devised to resolve conflict between concurrent \{\textless\}i\{\textgreater\}Updates\{\textless\}/i\{\textgreater\}, and integrated into the framework of {OT.} This work has been motivated by and conducted in the {CoWord} project, which aims to convert {MS} Word into a real-time collaborative word processor without changing its source code. This {OT} extension is relevant not only to word processors but also to a range of interactive applications that can be modelled as editors.},
	urldate = {2012-12-11},
	booktitle = {Proceedings of the 2004 {ACM} conference on Computer supported cooperative work},
	publisher = {{ACM}},
	author = {Sun, David and Xia, Steven and Sun, Chengzheng and Chen, David},
	year = {2004},
	keywords = {group undo, multi-versioning, Operational transformation},
	pages = {437–446},
	file = {ACM Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/8ETH2B2U/Sun et al. - 2004 - Operational transformation for collaborative word .pdf:application/pdf}
},

@inproceedings{nichols_high-latency_1995,
	address = {New York, {NY}, {USA}},
	series = {{UIST} '95},
	title = {High-latency, low-bandwidth windowing in the Jupiter collaboration system},
	isbn = {0-89791-709-X},
	url = {http://doi.acm.org/10.1145/215585.215706},
	doi = {10.1145/215585.215706},
	urldate = {2012-12-11},
	booktitle = {Proceedings of the 8th annual {ACM} symposium on User interface and software technology},
	publisher = {{ACM}},
	author = {Nichols, David A. and Curtis, Pavel and Dixon, Michael and Lamping, John},
	year = {1995},
	keywords = {{CSCW}, groupware toolkits, optimistic currency control, {UIMS}, window toolkits},
	pages = {111–120},
	file = {ACM Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/Q9ZM66T9/Nichols et al. - 1995 - High-latency, low-bandwidth windowing in the Jupit.pdf:application/pdf}
},

@inproceedings{sun_operational_2012,
	address = {New York, {NY}, {USA}},
	series = {{CSCW} '12},
	title = {Operational transformation for orthogonal conflict resolution in real-time collaborative 2d editing systems},
	isbn = {978-1-4503-1086-4},
	url = {http://doi.acm.org/10.1145/2145204.2145411},
	doi = {10.1145/2145204.2145411},
	abstract = {Operational Transformation {(OT)} is commonly used for conflict resolution in real-time collaborative applications, but none of existing {OT} techniques is able to solve a special type of conflict - orthogonal conflict, which may occur when concurrent operations are inserting/deleting an arbitrary number of objects in different dimensions of a two-dimensional {(2D)} workspace, such as spreadsheet documents. This paper is the first to identify and solve the orthogonal conflict problem by extending {OT} with a new capability of resolving {2D} conflicts. Extending {OT} from one- to two-dimensional conflict resolution is fundamental to the theory and application of {OT}, and technically challenging as well because {2D} orthogonal conflict is different from but intimately related to the one-dimensional positional shifting conflict and necessitates new and integral solutions for multi-dimensional conflicts. In this paper, we present formal definitions of orthogonal conflict, pseudo-code description, design rationale analysis, and correctness verification and complexity analysis of the {2DOT} solution.},
	urldate = {2012-12-11},
	booktitle = {Proceedings of the {ACM} 2012 conference on Computer Supported Cooperative Work},
	publisher = {{ACM}},
	author = {Sun, Chengzheng and Wen, Hongkai and Fan, Hongfei},
	year = {2012},
	keywords = {conflict resolution, Operational transformation, real-time collaborative spreadsheet and table editing},
	pages = {1391–1400},
	file = {ACM Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/KZ5F272A/Sun et al. - 2012 - Operational transformation for orthogonal conflict.pdf:application/pdf}
},

@inproceedings{weiss_wooki:_2007,
	address = {Berlin, Heidelberg},
	series = {{WISE'07}},
	title = {Wooki: a {P2P} wiki-based collaborative writing tool},
	isbn = {3-540-76992-7, 978-3-540-76992-7},
	shorttitle = {Wooki},
	url = {http://dl.acm.org/citation.cfm?id=1781374.1781430},
	abstract = {Wiki systems are becoming an important part of the information system of many organisations and communities. This introduce the issue of the data availability in case of failure, heavy load or off-line access. We propose to replicate wiki pages across a {P2P} network of wiki engines. We address the problem of consistency of replicated wiki pages in the context of a {P2P} wiki system. In this paper, we present the architecture and the underlying algorithms of the wooki system. Compared to traditional wikis, Wooki is {P2P} wiki which scales, delivers better performances and allows off-line access.},
	urldate = {2012-12-11},
	booktitle = {Proceedings of the 8th international conference on Web information systems engineering},
	publisher = {Springer-Verlag},
	author = {Weiss, Stéphane and Urso, Pascal and Molli, Pascal},
	year = {2007},
	pages = {503–512}
},

@inproceedings{skaf-molli_peer--peer_2009,
	address = {Berlin, Heidelberg},
	series = {{DEXA} '09},
	title = {Peer-to-Peer Semantic Wikis},
	isbn = {978-3-642-03572-2},
	url = {http://dx.doi.org/10.1007/978-3-642-03573-9_16},
	doi = {10.1007/978-3-642-03573-9_16},
	abstract = {Wikis have demonstrated how it is possible to convert a community of strangers into a community of collaborators. Semantic wikis have opened an interesting way to mix web 2.0 advantages with the semantic web approach. {P2P} wikis have illustrated how wikis can be deployed on {P2P} wikis and take advantages of its intrinsic qualities: fault-tolerance, scalability and infrastructure cost sharing. In this paper, we present the first {P2P} semantic wiki that combines advantages of semantic wikis and {P2P} wikis. Building a {P2P} semantic wiki is challenging. It requires building an optimistic replication algorithm that is compatible with {P2P} constraints, ensures an acceptable level of consistency and generic enough to handle semantic wiki pages. The contribution of this paper is the definition of a clear model for building {P2P} semantic wikis. We define the data model, operations on this model, intentions of these operations, algorithms to ensure consistency and finally we implement the {SWOOKI} prototype based on these algorithms.},
	urldate = {2012-12-11},
	booktitle = {Proceedings of the 20th International Conference on Database and Expert Systems Applications},
	publisher = {Springer-Verlag},
	author = {Skaf-Molli, Hala and Rahhal, Charbel and Molli, Pascal},
	year = {2009},
	pages = {196–213}
},

@article{oster_building_2010,
	title = {Building a collaborative peer-to-peer wiki system on a structured overlay},
	volume = {54},
	issn = {1389-1286},
	url = {http://dx.doi.org/10.1016/j.comnet.2010.03.019},
	doi = {10.1016/j.comnet.2010.03.019},
	abstract = {The ever growing request for digital information raises the need for content distribution architectures providing high storage capacity, data availability and good performance. While many simple solutions for scalable distribution of quasi-static content exist, there are still no approaches that can ensure both scalability and consistency for the case of highly dynamic content, such as the data managed inside wikis. We propose a peer-to-peer solution for distributing and managing dynamic content, that combines two widely studied technologies: Distributed Hash Tables {(DHT)} and optimistic replication. In our ''universal wiki'' engine architecture {(UniWiki)}, on top of a reliable, inexpensive and consistent {DHT-based} storage, any number of front-ends can be added, ensuring both read and write scalability, as well as suitability for large-scale scenarios. The implementation is based on Damon, a distributed {AOP} middleware, thus separating distribution, replication, and consistency responsibilities, and also making our system transparently usable by third party wiki engines. Finally, {UniWiki} has been proved viable and fairly efficient in large-scale scenarios.},
	number = {12},
	urldate = {2012-12-11},
	journal = {Comput. Netw.},
	author = {Oster, Gérald and Mondéjar, Rubén and Molli, Pascal and Dumitriu, Sergiu},
	month = aug,
	year = {2010},
	keywords = {Collaborative editing, Distributed interception, Optimistic replication, Peer-to-peer},
	pages = {1939–1952}
},

@article{shapiro_convergent_2011,
	title = {Convergent and Commutative Replicated Data Types},
	volume = {0},
	copyright = {Authors who publish with this journal agree to the following terms:     Authors retain copyright and grant the journal right of first publication with the work simultaneously licensed under a  Creative Commons Attribution License  that allows others to share the work with an acknowledgement of the work's authorship and initial publication in this journal.   Authors are able to enter into separate, additional contractual arrangements for the non-exclusive distribution of the journal's published version of the work (e.g., post it to an institutional repository or publish it in a book), with an acknowledgement of its initial publication in this journal.},
	issn = {0252-9742},
	url = {http://albcom.lsi.upc.edu/ojs/index.php/beatcs/article/view/78},
	abstract = {Convergent and Commutative Replicated Data Types},
	language = {en},
	number = {104},
	urldate = {2012-12-12},
	journal = {Bulletin of the {EATCS}},
	author = {Shapiro, Marc and Preguiça, Nuno and Baquero, Carlos and Zawirski, Marek and P. Fatourou, The Distributed Computing Column},
	month = jan,
	year = {2011},
	note = {Eventual consistency aims to ensure that replicas of some mutable shared object converge without foreground synchronisation. Previous approaches to eventual consistency are ad-hoc and error-prone. We study a principled approach: to base the design of shared data types on some simple formal conditions that are sufficient to guarantee eventual consistency. We call these types Convergent or Commutative Replicated Data Types {(CRDTs).} This paper formalises asynchronous object replication, either state based or operation based, and provides a sufficient condition appropriate for each case. It describes several useful {CRDTs}, including container data types supporting both add and remove operations with clean semantics, and more complex types such as graphs and monotonic {DAGs.} It discusses some properties needed to implement non-trivial {CRDTs.}},
	pages = {67--88},
	file = {Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/VQ7D62V2/78.html:text/html}
},

@inproceedings{craig_distributed_2011,
	address = {Washington, {DC}, {USA}},
	series = {{WI-IAT} '11},
	title = {A Distributed Wiki System Based on Peer-to-Peer File Sharing Principles},
	isbn = {978-0-7695-4513-4},
	url = {http://dx.doi.org/10.1109/WI-IAT.2011.231},
	doi = {10.1109/WI-IAT.2011.231},
	abstract = {In peer-to-peer {(P2P)} file-sharing networks, each peer maintains its own repository, publishing files, downloading files from others, and making its own files available for download. We present {P2Pedia}, a distributed wiki system applying these principles to collaborative editing of documents: contributors may maintain their own version of each document, while accessing and reusing the contributions of others. This collaboration model, by allowing for multiple versions of a document, generates a different type of versioning hierarchy, and changes the semantics of wikilinks. We show how the versioning hierarchy of documents and the wikilinks create a graph of documents, that can be searched using an existing file-sharing infrastructure, and we propose some trust indicators to help users choose between available search results. Finally, we present the design and implementation of {P2Pedia}, and propose some scenarios where our proposed collaboration model is most appropriate.},
	urldate = {2012-12-11},
	booktitle = {Proceedings of the 2011 {IEEE/WIC/ACM} International Conferences on Web Intelligence and Intelligent Agent Technology - Volume 01},
	publisher = {{IEEE} Computer Society},
	author = {Craig, Alexander and Davoust, Alan and Esfandiari, Babak},
	year = {2011},
	keywords = {graph queries, Peer-to-peer, trust, wiki},
	pages = {364–371},
	file = {ACM Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/T33A83S4/Craig et al. - 2011 - A Distributed Wiki System Based on Peer-to-Peer Fi.pdf:application/pdf}
},

@inproceedings{oster_uniwiki:_2009,
	title = {{UniWiki:} A Collaborative {P2P} System for Distributed Wiki Applications},
	isbn = {978-0-7695-3683-5},
	shorttitle = {{UniWiki}},
	url = {http://hal.inria.fr/inria-00431679/fr/},
	doi = {10.1109/WETICE.2009.42},
	urldate = {2012-12-11},
	publisher = {{IEEE}},
	author = {Oster, Gerald and Molli, Pascal and Dumitriu, Sergiu and Mondejar, Ruben},
	month = jun,
	year = {2009},
	pages = {87--92},
	file = {HAL - INRIA :: [inria-00431679, version 1] UniWiki: A Collaborative P2P System for Distributed Wiki Applications:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/QCETX3DH/fr.html:text/html}
},

@article{saito_optimistic_2005,
	title = {Optimistic replication},
	volume = {37},
	abstract = {Data replication is a key technology in distributed data sharing systems, enabling higher availability and performance. This paper surveys optimistic replication algorithms that allow replica contents to diverge in the short term, in order to support concurrent work practices and to tolerate failures in low-quality communication links. The importance of such techniques is increasing as collaboration through wide-area and mobile networks becomes popular. Optimistic replication techniques are different from traditional “pessimistic ” ones. Instead of synchronous replica coordination, an optimistic algorithm propagates changes in the background, discovers conflicts after they happen and reaches agreement on the final contents incrementally. We explore the solution space for optimistic replication algorithms. This paper identifies key challenges facing optimistic replication systems — ordering operations, detecting and resolving conflicts, propagating changes efficiently, and bounding replica divergence — and provides a comprehensive survey of techniques developed for addressing these challenges.},
	journal = {{ACM} Computing Surveys},
	author = {Saito, Yasushi},
	year = {2005},
	pages = {42–81},
	file = {Citeseer - Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/CNSM664T/Saito - 2005 - Optimistic replication.pdf:application/pdf;Citeseer - Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/B5XJU92U/summary.html:text/html}
},

@inproceedings{burckhardt_eventually_2012,
	address = {Berlin, Heidelberg},
	series = {{ESOP'12}},
	title = {Eventually consistent transactions},
	isbn = {978-3-642-28868-5},
	url = {http://dx.doi.org/10.1007/978-3-642-28869-2_4},
	doi = {10.1007/978-3-642-28869-2_4},
	abstract = {When distributed clients query or update shared data, eventual consistency can provide better availability than strong consistency models. However, programming and implementing such systems can be difficult unless we establish a reasonable consistency model, i.e. some minimal guarantees that programmers can understand and systems can provide effectively. To this end, we propose a novel consistency model based on eventually consistent transactions. Unlike serializable transactions, eventually consistent transactions are ordered by two order relations (visibility and arbitration) rather than a single order relation. To demonstrate that eventually consistent transactions can be effectively implemented, we establish a handful of simple operational rules for managing replicas, versions and updates, based on graphs called revision diagrams. We prove that these rules are sufficient to guarantee correct implementation of eventually consistent transactions. Finally, we present two operational models (single server and server pool) of systems that provide eventually consistent transactions.},
	urldate = {2012-12-11},
	booktitle = {Proceedings of the 21st European conference on Programming Languages and Systems},
	publisher = {Springer-Verlag},
	author = {Burckhardt, Sebastian and Leijen, Daan and Fähndrich, Manuel and Sagiv, Mooly},
	year = {2012},
	pages = {67–86}
},

@inproceedings{burckhardt_cloud_2012,
	address = {Berlin, Heidelberg},
	series = {{ECOOP'12}},
	title = {Cloud types for eventual consistency},
	isbn = {978-3-642-31056-0},
	url = {http://dx.doi.org/10.1007/978-3-642-31057-7_14},
	doi = {10.1007/978-3-642-31057-7_14},
	abstract = {Mobile devices commonly access shared data stored on a server. To ensure responsiveness, many applications maintain local replicas of the shared data that remain instantly accessible even if the server is slow or temporarily unavailable. Despite its apparent simplicity and commonality, this scenario can be surprisingly challenging. In particular, a correct and reliable implementation of the communication protocol and the conflict resolution to achieve eventual consistency is daunting even for experts. To make eventual consistency more programmable, we propose the use of specialized cloud data types. These cloud types provide eventually consistent storage at the programming language level, and thus abstract the numerous implementation details (servers, networks, caches, protocols). We demonstrate (1) how cloud types enable simple programs to use eventually consistent storage without introducing undue complexity, and (2) how to provide cloud types using a system and protocol comprised of multiple servers and clients.},
	urldate = {2012-12-11},
	booktitle = {Proceedings of the 26th European conference on Object-Oriented Programming},
	publisher = {Springer-Verlag},
	author = {Burckhardt, Sebastian and Fähndrich, Manuel and Leijen, Daan and Wood, Benjamin P.},
	year = {2012},
	pages = {283–307}
},

@inproceedings{weiss_logoot:_2009,
	title = {Logoot: A Scalable Optimistic Replication Algorithm for Collaborative Editing on {P2P} Networks},
	shorttitle = {Logoot},
	doi = {10.1109/ICDCS.2009.75},
	abstract = {Massive collaborative editing becomes a reality through leading projects such as Wikipedia. This massive collaboration is currently supported with a costly central service. In order to avoid such costs, we aim to provide a peer-to-peer collaborative editing system. Existing approaches to build distributed collaborative editing systems either do not scale in terms of number of users or in terms of number of edits. We present the Logoot approach that scales in these both dimensions while ensuring causality, consistency and intention preservation criteria. We evaluate the Logoot approach and compare it to others using a corpus of all the edits applied on a set of the most edited and the biggest pages of Wikipedia.},
	booktitle = {29th {IEEE} International Conference on Distributed Computing Systems, 2009. {ICDCS} '09},
	author = {Weiss, S. and Urso, P. and Molli, P.},
	month = jun,
	year = {2009},
	keywords = {distributed collaborative editing systems, Logoot, {P2P} networks, peer-to-peer collaborative editing system, peer-to-peer computing, scalable optimistic replication algorithm, Web sites, Wikipedia},
	pages = {404 --412},
	file = {IEEE Xplore Abstract Record:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/XSWVWK6X/articleDetails.html:text/html}
},

@book{aslan_c-set:_????,
	title = {C-Set: a Commutative Replicated Data Type for Semantic Stores},
	shorttitle = {C-Set},
	abstract = {Abstract. Web 2.0 tools are currently evolving to embrace semantic web technologies. Blogs, {CMS}, Wikis, social networks and real-time notifications, integrate ways to provide semantic annotations and therefore contribute to the linked data and more generally to the semantic web vision. This evolution generates a lot of semantic datasets of different qualities, different trust levels and partially replicated. This raises the issue of managing the consistency among these replicas. This issue is challenging because semantic data-spaces can be very large, they can be managed by autonomous participants and the number of replicas is unknown. A new class of algorithms called Commutative Replicated Data Type are emerging for ensuring eventual consistency of highly dynamic content on {P2P} networks. In this paper, we define C-Set a {CRDT} specifically designed to be integrated in Triple-stores. C-Set allows efficient {P2P} synchronisation of an arbitrary number of autonomous semantic stores.},
	author = {Aslan, Khaled and Molli, Pascal and Skaf-molli, Hala and Weiss, Stephane},
	file = {Citeseer - Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/8KCWZ839/Aslan et al. - C-Set a Commutative Replicated Data Type for Sema.pdf:application/pdf;Citeseer - Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/44TJ7TIZ/summary.html:text/html}
},

@article{letia_consistency_2010,
	title = {Consistency without concurrency control in large, dynamic systems},
	volume = {44},
	issn = {0163-5980},
	url = {http://doi.acm.org/10.1145/1773912.1773921},
	doi = {10.1145/1773912.1773921},
	abstract = {Replicas of a commutative replicated data type {(CRDT)} eventually converge without any complex concurrency control. We validate the design of a non-trivial {CRDT}, a replicated sequence, with performance measurements in the context of Wikipedia. Furthermore, we discuss how to eliminate a remaining scalability bottleneck: Whereas garbage collection previously required a system-wide consensus, here we propose a flexible two-tier architecture and a protocol for migrating between tiers. We also discuss how the {CRDT} concept can be generalised, and its limitations.},
	number = {2},
	urldate = {2012-12-11},
	journal = {{SIGOPS} Oper. Syst. Rev.},
	author = {Letia, Mihai and Pregui\{\textbackslash\}cca, Nuno and Shapiro, Marc},
	month = apr,
	year = {2010},
	pages = {29–34},
	file = {ACM Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/B9ZT9CF2/Letia et al. - 2010 - Consistency without concurrency control in large, .pdf:application/pdf}
},

@article{weiss_logoot-undo:_2010,
	title = {Logoot-Undo: Distributed Collaborative Editing System on {P2P} Networks},
	volume = {21},
	issn = {1045-9219},
	shorttitle = {Logoot-Undo},
	url = {http://dx.doi.org/10.1109/TPDS.2009.173},
	doi = {10.1109/TPDS.2009.173},
	abstract = {Peer-to-peer systems provide scalable content distribution for cheap and resist to censorship attempts. However, {P2P} networks mainly distribute immutable content and provide poor support for highly dynamic content such as produced by collaborative systems. A new class of algorithms called {CRDT} {(Commutative} Replicated Data Type), which ensures consistency of highly dynamic content on {P2P} networks, is emerging. However, if existing {CRDT} algorithms support the "edit anywhere, anytime” feature, they do not support the "undo anywhere, anytime” feature. In this paper, we present the Logoot-Undo {CRDT} algorithm, which integrates the "undo anywhere, anytime” feature. We compare the performance of the proposed algorithm with related algorithms and measure the impact of the undo feature on the global performance of the algorithm. We prove that the cost of the undo feature remains low on a corpus of data extracted from Wikipedia.},
	number = {8},
	urldate = {2012-12-11},
	journal = {{IEEE} Trans. Parallel Distrib. Syst.},
	author = {Weiss, Stephane and Urso, Pascal and Molli, Pascal},
	month = aug,
	year = {2010},
	keywords = {Collaborative editing, {CRDT.}, group undo, Optimistic replication, {P2P}, scalability},
	pages = {1162–1174}
},

@incollection{martin_scalable_2010,
	series = {Lecture Notes in Computer Science},
	title = {Scalable {XML} Collaborative Editing with Undo},
	copyright = {©2010 Springer Berlin Heidelberg},
	isbn = {978-3-642-16933-5, 978-3-642-16934-2},
	url = {http://link.springer.com.resources.library.brandeis.edu/chapter/10.1007/978-3-642-16934-2_37},
	abstract = {Commutative Replicated Data-Type {(CRDT)} is a new class of algorithms that ensures scalable consistency of replicated data. It has been successfully applied to collaborative editing of texts without complex concurrency control. In this paper, we present a {CRDT} to edit {XML} data. Compared to existing approaches for {XML} collaborative editing, our approach is more scalable and handles all the {XML} editing aspects : elements, contents, attributes and undo. Indeed, undo is recognized as an important feature for collaborative editing that allows to overcome system complexity through error recovery or collaborative conflict resolution.},
	number = {6426},
	urldate = {2012-12-11},
	booktitle = {On the Move to Meaningful Internet Systems: {OTM} 2010},
	publisher = {Springer Berlin Heidelberg},
	author = {Martin, Stéphane and Urso, Pascal and Weiss, Stéphane},
	editor = {Meersman, Robert and Dillon, Tharam and Herrero, Pilar},
	month = jan,
	year = {2010},
	keywords = {Algorithm Analysis and Problem Complexity, Artificial Intelligence (incl. Robotics), Collaborative editing, Computer Communication Networks, {CRDT}, group undo, Information Systems Applications {(incl.Internet)}, Management of Computing and Information Systems, Optimistic replication, {P2P}, scalability, software engineering, {XML}},
	pages = {507--514},
	file = {Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/KU8UQA5E/10.html:text/html}
},

@inproceedings{martin_controlled_2012,
	title = {Controlled conflict resolution for replicated document},
	url = {http://hal.archives-ouvertes.fr/hal-00763410},
	abstract = {Collaborative working is increasingly popular, but it presents challenges due to the need for high responsiveness and disconnected work support. To address these challenges the data is optimistically replicated at the edges of the network, i.e. personal computers or mobile devices. This replication requires a merge mechanism that preserves the consistency and structure of the shared data subject to concurrent modifications. In this paper, we propose a generic design to ensure eventual consistency (every replica will eventually view the same data) and to maintain the specific constraints of the replicated data. Our layered design provides to the application engineer the complete control over system scalability and behavior of the replicated data in face of concurrent modifications. We show that our design allows replication of complex data types with acceptable performances.},
	urldate = {2012-12-11},
	booktitle = {Controlled conflict resolution for replicated document},
	author = {Martin, Stéphane and Ahmed-Nacer, Mehdi and Urso, Pascal},
	month = oct,
	year = {2012},
	keywords = {Collaborative editing, Optimistic replication, replicated document},
	file = {Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/IWMVUZR8/Martin et al. - 2012 - Controlled conflict resolution for replicated docu.pdf:application/pdf;Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/UGTR5IF9/index.html:text/html}
},

@inproceedings{preguica_commutative_2009,
	title = {A Commutative Replicated Data Type for Cooperative Editing},
	url = {http://hal.inria.fr/inria-00445975/en/},
	doi = {10.1109/ICDCS.2009.20},
	urldate = {2012-12-11},
	publisher = {{IEEE}},
	author = {Preguica, Nuno and Marques, Joan Manuel and Shapiro, Marc and Letia, Mihai},
	month = jun,
	year = {2009},
	pages = {395--403},
	file = {HAL - INRIA :: [inria-00445975, version 1] A commutative replicated data type for cooperative editing:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/Q2MJFTRG/en.html:text/html}
},

@article{shapiro_designing_2011,
	title = {Designing a commutative replicated data type},
	volume = {104},
	url = {http://hal.inria.fr/inria-00177693},
	abstract = {Commuting operations greatly simplify consistency in distributed systems. This paper focuses on designing for commutativity, a topic neglected previously. We show that the replicas of any data type for which concurrent operations commute converges to a correct value, under some simple and standard assumptions. We also show that such a data type supports transactions with very low cost. We identify a number of approaches and techniques to ensure commutativity. We re-use some existing ideas (non-destructive updates coupled with invariant identification), but propose a much more efficient implementation. Furthermore, we propose a new technique, background consensus. We illustrate these ideas with a shared edit buffer data type.},
	urldate = {2012-12-11},
	journal = {Bulletin of the {EATCS}},
	author = {Shapiro, Marc and Preguiça, Nuno},
	year = {2011},
	keywords = {commutative operations, Data replication, Optimistic replication},
	file = {Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/JS3KNVST/Shapiro and Preguiça - 2007 - Designing a commutative replicated data type.pdf:application/pdf;Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/8EK4TAW5/en.html:text/html}
},

@inproceedings{oster_data_2006,
	address = {New York, {NY}, {USA}},
	series = {{CSCW} '06},
	title = {Data consistency for {P2P} collaborative editing},
	isbn = {1-59593-249-6},
	url = {http://doi.acm.org/10.1145/1180875.1180916},
	doi = {10.1145/1180875.1180916},
	abstract = {Peer-to-peer {(P2P)} networks are very efficient for distributing content. We want to use this potential to allow not only distribution but collaborative editing of this content. Existing collaborative editing systems are centralised or depend on the number of sites. Such systems cannot scale when deployed on {P2P} networks. In this paper, we propose a new model for building a collaborative editing system. This model is fully decentralised and does not depend on the number of sites.},
	urldate = {2012-12-12},
	booktitle = {Proceedings of the 2006 20th anniversary conference on Computer supported cooperative work},
	publisher = {{ACM}},
	author = {Oster, Gérald and Urso, Pascal and Molli, Pascal and Imine, Abdessamad},
	year = {2006},
	keywords = {Collaborative editing, concurrency control, {CSCW}, Optimistic replication},
	pages = {259–268},
	file = {ACM Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/JS4M4AB3/Oster et al. - 2006 - Data consistency for P2P collaborative editing.pdf:application/pdf}
},

@article{weiss_logoot:_2008,
	title = {Logoot: a {P2P} collaborative editing system},
	shorttitle = {Logoot},
	url = {http://hal.inria.fr/inria-00336191},
	abstract = {Massive collaborative editing becomes a reality through leading projects such as the Wikipedia. Such massive collaboration is currently supported with costly central service. To avoid such costs, we aim to provide a peer-to-peer collaborative editing system. Existing approaches that propose distributed collaborative distributed either do not scale in term of users number or in term of editions number. We present the Logoot approach that scales in these both dimensions while ensuring causality, consistency and intention criteria. We evaluate the Logoot approach and compare it to others with a corpus of all the editions applied on a set of the most edited and biggest page of the Wikipedia.},
	urldate = {2012-12-12},
	author = {Weiss, Stéphane and Urso, Pascal and Molli, Pascal},
	year = {2008},
	keywords = {Collaborative editing, Optimistic replication, {P2P}, scalability},
	file = {Full Text PDF:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/HHRZ8FAX/Weiss et al. - 2008 - Logoot a P2P collaborative editing system.pdf:application/pdf;Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/6M8IFIPB/inria-00336191.html:text/html}
},

@article{weiss_wooki:_2007-1,
	title = {Wooki: a p2p wiki-based collaborative writing tool},
	shorttitle = {Wooki},
	url = {http://www.springerlink.com/index/L216737440620N00.pdf},
	urldate = {2012-12-12},
	journal = {Web Information Systems {Engineering–WISE} 2007},
	author = {Weiss, S. and Urso, P. and Molli, P.},
	year = {2007},
	pages = {503–512},
	file = {Snapshot:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/MXXTHAXN/10.html:text/html}
},

@inproceedings{granville_collabed:_2009,
	title = {{CollabEd:} A Platform for Collaboratizing Existing Editors},
	shorttitle = {{CollabEd}},
	doi = {10.1109/eLmL.2009.20},
	abstract = {{CollabEd} is a platform for easily collaboratizing linear editing systems. We will describe our modular design, which is geared toward building {CollabEd} plugins for existing editors and eliminating the need for developers to provide or understand the networking and data consistency controls required for real-time, synchronous collaborative editing. In this paper we showcase our open-source {CollabEd} application already ported for use with a number of popular programming editors {(Eclipse}, {NetBeans}, {jEdit}, etc.) and a drawing program {(DrawSWF).} The {CollabEd} platform is built on top of our optimistic replication data-model {(MSET)} that preserves local-site editing response time without the use of operational transformation. One of the features we will highlight is the ability to save collaboration sessions for later playback with user-specific editing statistics.},
	booktitle = {International Conference on Mobile, Hybrid, and On-line Learning, 2009. {ELML} '09},
	author = {Granville, {K.G.} and Hickey, {T.J.}},
	month = feb,
	year = {2009},
	keywords = {collaborative linear editing system, data consistency control, data integrity, drawing program editor, groupware, local-site editing response time, open-source {CollabEd} application, optimistic replication data-model, public domain software, text editing, user-specific editing statistics},
	pages = {90 --96},
	file = {IEEE Xplore Abstract Record:/Users/tim/Library/Application Support/Firefox/Profiles/default.po9/zotero/storage/7CIVGT6K/articleDetails.html:text/html}
}